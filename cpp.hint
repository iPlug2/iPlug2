#define BEGIN_IPLUG_NAMESPACE namespace iplug {
#define END_IPLUG_NAMESPACE }
#define BEGIN_IGRAPHICS_NAMESPACE namespace igraphics {
#define END_IGRAPHICS_NAMESPACE }
#define BEGIN_INCLUDE_DEPENDENCIES
#define END_INCLUDE_DEPENDENCIES
#define NEW new (1, __FILE__, __LINE__)
#define NEW
#define SMTG_OVERRIDE
#define SMTG_CPP11_STDLIBSUPPORT
#define SMTG_NOEXCEPT
#define DECLARE_CLASS_IID(ClassName, l1, l2, l3, l4) static const ::Steinberg::TUID ClassName##_iid = INLINE_UID (l1, l2, l3, l4); const ::Steinberg::FUID ClassName::iid (ClassName##_iid);
#define DECLARE_CLASS_IID(ClassName, l1, l2, l3, l4) static const ::Steinberg::TUID ClassName##_iid = INLINE_UID (l1, l2, l3, l4);
#define WDL_LITTLE_ENDIAN
#define OBJ_METHODS(className, baseClass) static inline Steinberg::FClassID getFClassID () {return (#className);} virtual Steinberg::FClassID isA () const SMTG_OVERRIDE {return className::getFClassID ();} virtual bool isA (Steinberg::FClassID s) const SMTG_OVERRIDE {return isTypeOf (s, false);} virtual bool isTypeOf (Steinberg::FClassID s, bool askBaseClass = true) const SMTG_OVERRIDE { return (classIDsEqual (s, #className) ? true : (askBaseClass ? baseClass::isTypeOf (s, true) : false)); }
#define SMTG_ALWAYS_INLINE __inline__ __attribute__((__always_inline__))
#define SMTG_ALWAYS_INLINE
#define VST3_PROCESSOR_UID
#define INLINE_UID_FROM_FUID(x) INLINE_UID (x.getLong1 (), x.getLong2 (), x.getLong3 (), x.getLong4 ())
#define DEF_CLASS2(cid, cardinality, category, name, classFlags, subCategories, version, sdkVersion, createMethod) { TUID lcid = cid; static PClassInfo2 componentClass (lcid,cardinality,category,name,classFlags,subCategories,0,version,sdkVersion); gPluginFactory->registerClass (&componentClass,createMethod); }
#define WDL_ENDIAN_INLINE
#define DEF_CLASS_IID(ClassName) const ::Steinberg::FUID ClassName::iid (ClassName##_iid);
#define IMPLEMENT_FUNKNOWN_METHODS(ClassName, InterfaceName, ClassIID) IMPLEMENT_REFCOUNT (ClassName) IMPLEMENT_QUERYINTERFACE (ClassName, InterfaceName, ClassIID)
#define DEFINE_INTERFACES Steinberg::tresult PLUGIN_API queryInterface (const Steinberg::TUID iid, void** obj) SMTG_OVERRIDE {
#define IMPLEMENT_REFCOUNT(ClassName) ::Steinberg::uint32 PLUGIN_API ClassName::addRef () { return ::Steinberg::FUnknownPrivate::atomicAdd (__funknownRefCount, 1); } ::Steinberg::uint32 PLUGIN_API ClassName::release () { if (::Steinberg::FUnknownPrivate::atomicAdd (__funknownRefCount, -1) == 0) { delete this; return 0; } return __funknownRefCount; }
#define STDMETHODCALLTYPE
#define REFIID
#define STDMETHOD(method)
#define STDMETHOD(method) HRESULT (STDMETHODCALLTYPE * method)
#define THIS_
#define PURE
#define STDMETHOD_(type, method)
#define STDMETHOD_(type, method) type (STDMETHODCALLTYPE * method)
#define RTAUDIOAPI __declspec(dllexport)
#define RTAUDIOAPI __attribute__((visibility("default")))
#define RTAUDIOAPI
#define FUNKNOWN_METHODS2(InterfaceName1, InterfaceName2, BaseClass) DEF_INTERFACES_2(InterfaceName1,InterfaceName2,BaseClass) REFCOUNT_METHODS(BaseClass)
#define SINGLETON(ClassName) static ClassName* instance (bool create = true) { static Steinberg::FObject* inst = nullptr; if (inst == nullptr && create && Steinberg::Singleton::isTerminated () == false) { Steinberg::Singleton::lockRegister (); if (inst == nullptr) { inst = NEW ClassName; Steinberg::Singleton::registerInstance (&inst); } Steinberg::Singleton::unlockRegister (); } return (ClassName*)inst; }
#define ZEXPORT
#define ZEXPORT __declspec(dllexport)
#define ZEXPORT __declspec(dllimport)
#define local
#define OF(args)
#define OF(args) ()
#define ZEXTERN extern __declspec(dllexport)
#define ZEXTERN extern __declspec(dllimport)
#define ZEXTERN
#define YOGA_EXPORT
#define YOGA_EXPORT __attribute__((visibility("default")))
#define interface
#define DELEGATE_REFCOUNT(ClassName) public: virtual ::Steinberg::uint32 PLUGIN_API addRef () SMTG_OVERRIDE { return ClassName::addRef (); } virtual ::Steinberg::uint32 PLUGIN_API release () SMTG_OVERRIDE { return ClassName::release (); }
#define SMTG_TYPE_SIZE_CHECK(Type, Platform64Size, MacOS32Size, Win32Size, Linux32Size) SMTG_TYPE_STATIC_CHECK (sizeof, Type, Platform64Size, MacOS32Size, Win32Size, Linux32Size)
#define SMTG_TYPE_SIZE_CHECK(Type, Platform64Size, MacOS32Size, Win32Size, Linux32Size)
#define PLUGIN_API
#define setState
#define getState
#define TRACE Trace(TRACELOC, "");
#define TRACE
#define VST3_API
#define DEF_INTERFACE(InterfaceName) QUERY_INTERFACE (iid, obj, InterfaceName::iid, InterfaceName)
