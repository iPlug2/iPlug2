parameters:
  name: ''
  path: ''
  graphics: 'NANOVG'
  target: 'All'
  artifactName: ''
  srcRepo: 'none'
  srcBranch: 'master'
  architecture: 'x64'  # New parameter for architecture

steps:
  - bash: |
      echo srcRepo parameter = ${{parameters.srcRepo}}
      if [ ${{ parameters.srcRepo }} != none ]
      then
        if [ ! -d ./${{parameters.path}} ]
        then  
          mkdir -p ./${{parameters.path}}
        fi
        cd ./${{parameters.path}}
        git clone --recursive -b ${{parameters.srcBranch}} ${{parameters.srcRepo}} ${{parameters.name}}
      else
        echo no remote repo argument supplied, building local project ${{parameters.path}}/${{parameters.name}} ... 
      fi
    env:
      GITHUB_PAT: $(GITHUB_PAT)
    displayName: (Optionally) clone ${{parameters.name}} repo

  - bash: |
      graphics=${{parameters.graphics}}
      if [ $graphics = "SKIA" ]
      then
        cd ./${{parameters.path}}/${{parameters.name}}/config
        sed -i.bu 's/IGRAPHICS_NANOVG;IGRAPHICS_GL2/IGRAPHICS_SKIA;IGRAPHICS_GL2/' ${{parameters.name}}-win.props
      fi
    displayName: Set graphics string to ${{parameters.graphics}}

  - task: VSBuild@1
    inputs:
      solution: '${{parameters.path}}/${{parameters.name}}/${{parameters.name}}.sln'
      vsVersion: '17.0'
      platform: ${{parameters.architecture}}
      msbuildArgs: /t:${{parameters.name}}-vst2
      configuration: '${{parameters.configuration}}'
    displayName: Compile ${{parameters.name}} VST2 ${{parameters.architecture}}
    condition: eq(variables.build_vst2, True) 

  - task: VSBuild@1
    inputs:
      solution: '${{parameters.path}}/${{parameters.name}}/${{parameters.name}}.sln'
      vsVersion: '17.0'
      platform: ${{parameters.architecture}}
      msbuildArgs: /t:${{parameters.name}}-vst3
      configuration: '${{parameters.configuration}}'
    displayName: Compile ${{parameters.name}} VST3 ${{parameters.architecture}}
    condition: eq(variables.build_vst3, True) 

  - task: VSBuild@1
    inputs:
      solution: '${{parameters.path}}/${{parameters.name}}/${{parameters.name}}.sln'
      vsVersion: '17.0'
      platform: ${{parameters.architecture}}
      msbuildArgs: /t:${{parameters.name}}-aax
      configuration: '${{parameters.configuration}}'
    displayName: Compile ${{parameters.name}} AAX ${{parameters.architecture}}
    condition: eq(variables.build_aax, True) 

  - task: VSBuild@1
    inputs:
      solution: '${{parameters.path}}/${{parameters.name}}/${{parameters.name}}.sln'
      vsVersion: '17.0'
      platform: ${{parameters.architecture}}
      msbuildArgs: /t:${{parameters.name}}-app
      configuration: '${{parameters.configuration}}'
    displayName: Compile ${{parameters.name}} APP ${{parameters.architecture}}
    condition: eq(variables.build_app, True) 

  - bash: |
      mkdir -p $BUILD_ARTIFACTSTAGINGDIRECTORY/APP/${{parameters.name}}/${{parameters.architecture}}
      mv ${{parameters.path}}/${{parameters.name}}/build-win/${{parameters.name}}_${{parameters.architecture}}.exe $BUILD_ARTIFACTSTAGINGDIRECTORY/APP/${{parameters.name}}/${{parameters.architecture}}
      mv ${{parameters.path}}/${{parameters.name}}/build-win/pdbs/${{parameters.name}}-app_${{parameters.architecture}}.pdb $BUILD_ARTIFACTSTAGINGDIRECTORY/APP/${{parameters.name}}/${{parameters.architecture}}
    displayName: Organize APP artifact
    condition: eq(variables.build_app, True) 

  - bash: |
      mkdir -p $BUILD_ARTIFACTSTAGINGDIRECTORY/VST3/${{parameters.name}}/${{parameters.architecture}}
      mv ${{parameters.path}}/${{parameters.name}}/build-win/${{parameters.name}}.vst3* $BUILD_ARTIFACTSTAGINGDIRECTORY/VST3/${{parameters.name}}/${{parameters.architecture}}
      mv ${{parameters.path}}/${{parameters.name}}/build-win/pdbs/${{parameters.name}}-vst3_${{parameters.architecture}}.pdb $BUILD_ARTIFACTSTAGINGDIRECTORY/VST3/${{parameters.name}}/${{parameters.architecture}}
    displayName: Organize VST3 artifact
    condition: eq(variables.build_vst3, True) 

  - bash: |
      mkdir -p $BUILD_ARTIFACTSTAGINGDIRECTORY/VST2/${{parameters.name}}/${{parameters.architecture}}
      mv ${{parameters.path}}/${{parameters.name}}/build-win/${{parameters.name}}_${{parameters.architecture}}.dll $BUILD_ARTIFACTSTAGINGDIRECTORY/VST2/${{parameters.name}}/${{parameters.architecture}}
      mv ${{parameters.path}}/${{parameters.name}}/build-win/pdbs/${{parameters.name}}-vst2_${{parameters.architecture}}.pdb $BUILD_ARTIFACTSTAGINGDIRECTORY/VST2/${{parameters.name}}/${{parameters.architecture}}
    displayName: Organize VST2 artifact
    condition: eq(variables.build_vst2, True)     

  - bash: |
      mkdir -p $BUILD_ARTIFACTSTAGINGDIRECTORY/AAX/${{parameters.name}}/${{parameters.architecture}}
      mv ${{parameters.path}}/${{parameters.name}}/build-win/${{parameters.name}}.aaxplugin* $BUILD_ARTIFACTSTAGINGDIRECTORY/AAX/${{parameters.name}}/${{parameters.architecture}}
      mv ${{parameters.path}}/${{parameters.name}}/build-win/pdbs/${{parameters.name}}-aax_${{parameters.architecture}}.pdb $BUILD_ARTIFACTSTAGINGDIRECTORY/AAX/${{parameters.name}}/${{parameters.architecture}}
    displayName: Organize AAX artifact
    condition: eq(variables.build_aax, True)    

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'WIN_VST2_${{parameters.artifactName}}_${{parameters.architecture}}'
      targetPath: '$(Build.ArtifactStagingDirectory)/VST2/${{parameters.name}}/${{parameters.architecture}}'
    displayName: Publish ${{parameters.name}} VST2 ${{parameters.architecture}}
    condition: eq(variables.build_vst2, True) 

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'WIN_VST3_${{parameters.artifactName}}_${{parameters.architecture}}'
      targetPath: '$(Build.ArtifactStagingDirectory)/VST3/${{parameters.name}}/${{parameters.architecture}}'
    displayName: Publish ${{parameters.name}} VST3 ${{parameters.architecture}}
    condition: eq(variables.build_vst3, True) 

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'WIN_AAX_${{parameters.artifactName}}_${{parameters.architecture}}'
      targetPath: '$(Build.ArtifactStagingDirectory)/AAX/${{parameters.name}}/${{parameters.architecture}}'
    displayName: Publish ${{parameters.name}} AAX ${{parameters.architecture}}
    condition: eq(variables.build_aax, True) 

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'WIN_APP_${{parameters.artifactName}}_${{parameters.architecture}}'
      targetPath: '$(Build.ArtifactStagingDirectory)/APP/${{parameters.name}}/${{parameters.architecture}}'
    displayName: Publish ${{parameters.name}} APP ${{parameters.architecture}}
    condition: eq(variables.build_app, True) 