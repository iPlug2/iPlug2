jobs:
# comment out this job if you don't have access to the AAX_SDK.zip secure file set up
# - template: build_aax_libs.yml

- job: BUILD_WIN_DEPS
  dependsOn: GET_SRC_TREE
  condition: and(eq(variables.build_deps, true), eq(variables.build_win, true))

  strategy:
    matrix:
      x86_RELEASE:
        buildPlatform: 'Win32'
        buildConfiguration: 'Release'
      x64_RELEASE:
        buildPlatform: 'x64'
        buildConfiguration: 'Release'
      x86_DEBUG:
        buildPlatform: 'Win32'
        buildConfiguration: 'Debug'
      x64_DEBUG:
        buildPlatform: 'x64'
        buildConfiguration: 'Debug'

  pool:
    vmImage: 'windows-2019'

  steps:
  - checkout: none

  - template: get_src_artifact.yml

  - task: VSBuild@1
    inputs:
      solution: 'Dependencies/IGraphics/IGraphicsLibraries.sln'
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'
    displayName: Build Windows Dependencies (except SKIA)

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '2.7'

  - script: |
      # curl -sSf -o rustup-init.exe https://win.rustup.rs
      # rustup-init.exe -y --default-toolchain stable
      # echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
      choco install llvm --version 10.0.0
    displayName: Install LLVM

  - bash: |
      cd ./Dependencies/IGraphics
      ./build-skia-win.sh $(buildConfiguration) $(buildPlatform)
    displayName: Build SKIA

  - bash: |
      cd ./Dependencies/Build
      ./../IGraphics/package-deps-src.sh
    displayName: slim SKIA src

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'DEPS_BUILD_WIN_$(buildPlatform)_$(buildConfiguration)'
      targetPath: 'Dependencies/Build/'
    displayName: Publish Windows $(buildPlatform) $(buildConfiguration) Dependencies Artifacts

- job: PUBLISH_WIN_DEPS
  condition: and(eq(variables.build_deps, true), eq(variables.build_win, true))
  dependsOn: BUILD_WIN_DEPS
  steps:
  - checkout: none

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'DEPS_BUILD_WIN_Win32_Release'
      targetPath: 'Dependencies/Build/'
    displayName: Download Win32_Release Artifact

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'DEPS_BUILD_WIN_Win32_Debug'
      targetPath: 'Dependencies/Build/'
    displayName: Download Win32_Debug Artifact

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'DEPS_BUILD_WIN_x64_Release'
      targetPath: 'Dependencies/Build/'
    displayName: Download x64_Release Artifact

  - task: DownloadPipelineArtifact@0
    inputs:
      artifactName: 'DEPS_BUILD_WIN_x64_Debug'
      targetPath: 'Dependencies/Build/'
    displayName: Download x64_Debug Artifact

  - task: DeleteFiles@1
    inputs:
      contents: 'Dependencies/Build/*.log'

  - task: DeleteFiles@1
    inputs:
      contents: 'Dependencies/Build/tmp'

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'IPLUG2_DEPS_WIN'
      targetPath: 'Dependencies/Build/'
    displayName: Publish Windows Dependencies Artifacts

- job: BUILD_MAC_DEPS
  dependsOn: GET_SRC_TREE
  condition: and(eq(variables.build_deps, true), eq(variables.build_mac, true))

  pool:
    vmImage: 'macOS-11.0'
  steps:
  - checkout: none

  - template: get_src_artifact.yml

  - bash: |
      cd ./Dependencies/IGraphics
      ./build-igraphics-libs-mac.sh
    displayName: Build Graphics Dependencies

  - bash: |
      cd ./Dependencies/IGraphics
      ./build-skia-mac.sh
    displayName: Build Skia

  - bash: |
      cd $BUILD_SOURCESDIRECTORY
      wget https://github.com/llvm/llvm-project/releases/download/llvmorg-9.0.1/clang+llvm-9.0.1-x86_64-apple-darwin.tar.xz
      tar -xf clang+llvm-9.0.1-x86_64-apple-darwin.tar.xz -C $HOME
      export PATH=$HOME/clang+llvm-9.0.1-x86_64-apple-darwin/bin:$PATH
      echo "##vso[task.setvariable variable=PATH]$PATH"

      cd $BUILD_SOURCESDIRECTORY/Dependencies/Extras/faust
      ./build-faust-mac.sh
    displayName: Build FAUST

  - bash: |
      cd $BUILD_SOURCESDIRECTORY/Dependencies/Extras/civetweb
      ./build-civetweb-mac.sh
    displayName: Build CivetWeb

  - bash: |
      cd ./Dependencies/Build
      ./../IGraphics/package-deps-src.sh
    displayName: slim SKIA src

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'IPLUG2_DEPS_MAC'
      targetPath: 'Dependencies/Build/'
    displayName: Publish Mac Dependencies Artifacts

- job: BUILD_IOS_DEPS
  dependsOn: GET_SRC_TREE
  condition: and(eq(variables.build_deps, true), eq(variables.build_ios, true))

  pool:
    vmImage: 'macOS-latest'
  steps:
  - checkout: none

  - template: get_src_artifact.yml

  - bash: |
      cd ./Dependencies/IGraphics
      ./build-skia-ios.sh x64
    displayName: Build Skia (x64)

  - bash: |
      cd ./Dependencies/IGraphics
      ./build-skia-ios.sh arm64
    displayName: Build Skia (ARM64)

  - bash: |
      cd ./Dependencies/Build
      ./../IGraphics/package-deps-src.sh
    displayName: slim SKIA src

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'IPLUG2_DEPS_IOS'
      targetPath: 'Dependencies/Build/'
    displayName: Publish iOS Dependencies Artifacts
