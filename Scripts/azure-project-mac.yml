parameters:
  name: ''
  path: ''
  graphics: 'NANOVG'
  target: 'All'
  artifactName: ''
  srcRepo: 'none'
  srcBranch: 'master'
  justApp: false

steps:
  - bash: |
      echo srcRepo parameter = ${{ parameters.srcRepo }}
      if [ ${{ parameters.srcRepo }} != none ]
      then
        if [ ! -d ./${{ parameters.path }} ]
        then
          mkdir -p ./${{ parameters.path }}
        fi
        cd ./${{ parameters.path }}
        git clone --recursive -b ${{ parameters.srcBranch }} ${{ parameters.srcRepo }} ${{ parameters.name }}
      else
        echo no remote repo argument supplied, building local project ${{ parameters.path }}/${{ parameters.name }} ... 
      fi
    env:
      GITHUB_PAT: $(GITHUB_PAT)
    displayName: (Optionally) clone ${{ parameters.name }} repo

  - bash: |
      cd ./${{ parameters.path }}/${{ parameters.name }}/scripts
      chmod +x *.sh # in-case executable bit was lost (e.g. project duplicated on windows)
      chmod +x *.command
      chmod +x *.py
    displayName: Ensure scripts are executable

  - bash: |
      graphics=${{ parameters.graphics }}
      if [ $graphics = "LICE" ]
      then
        cd ./${{ parameters.path }}/${{ parameters.name }}/config
        sed -i.bu 's/IGRAPHICS_NANOVG IGRAPHICS_METAL/IGRAPHICS_LICE/' ${{ parameters.name }}-mac.xcconfig
        sed -i.bu 's/\/\/$(IGRAPHICS_LNK_FLAGS)/$(IGRAPHICS_LNK_FLAGS)/' ${{ parameters.name }}-mac.xcconfig
      elif [ $graphics = "CAIRO" ]
      then
        cd ./${{ parameters.path }}/${{ parameters.name }}/config
        sed -i.bu 's/IGRAPHICS_NANOVG IGRAPHICS_METAL/IGRAPHICS_CAIRO/' ${{ parameters.name }}-mac.xcconfig
        sed -i.bu 's/\/\/$(IGRAPHICS_LNK_FLAGS)/$(IGRAPHICS_LNK_FLAGS)/' ${{ parameters.name }}-mac.xcconfig
      elif [ $graphics = "AGG" ]
      then
        cd ./${{ parameters.path }}/${{ parameters.name }}/config
        sed -i.bu 's/IGRAPHICS_NANOVG IGRAPHICS_METAL/IGRAPHICS_AGG/' ${{ parameters.name }}-mac.xcconfig
        sed -i.bu 's/\/\/$(IGRAPHICS_LNK_FLAGS)/$(IGRAPHICS_LNK_FLAGS)/' ${{ parameters.name }}-mac.xcconfig
      fi
    displayName: Set graphics string to ${{ parameters.graphics }}

  - task: Xcode@5
    inputs:
      sdk: 'macosx10.13'
      xcWorkspacePath: '${{ parameters.path }}/${{ parameters.name }}/projects/${{ parameters.name }}-macOS.xcodeproj'
      args: '-target ${{ parameters.target }} -xcconfig ${{ parameters.path }}/${{ parameters.name }}/config/${{ parameters.name }}-mac.xcconfig'
      configuration: '${{ parameters.configuration }}'
      xcodeVersion: '9'
    displayName: Build Xcode project

  # - bash: |
  #     mkdir -p ${{ parameters.path }}/${{ parameters.name }}/build-mac/
  #     echo "hello ${{ parameters.graphics }}" > ${{ parameters.path }}/${{ parameters.name }}/build-mac/${{ parameters.graphics }}.txt

  #   displayName: TEST PAYLOAD

  - bash: |
      mkdir -p $BUILD_ARTIFACTSTAGINGDIRECTORY/APP/${{ parameters.name }}
      mv ${{ parameters.path }}/${{ parameters.name }}/build-mac/${{ parameters.name }}.app* $BUILD_ARTIFACTSTAGINGDIRECTORY/APP/${{ parameters.name }}

      #if we are building a project with plug-ins
      if [ -d ${{ parameters.path }}/${{ parameters.name }}/build-mac/${{ parameters.name }}.vst3 ] #todo: check something else ${{parameters.justApp}}
      then
        mkdir -p $BUILD_ARTIFACTSTAGINGDIRECTORY/VST2/${{ parameters.name }}
        mkdir -p $BUILD_ARTIFACTSTAGINGDIRECTORY/VST3/${{ parameters.name }}
        mkdir -p $BUILD_ARTIFACTSTAGINGDIRECTORY/AAX/${{ parameters.name }}
        mkdir -p $BUILD_ARTIFACTSTAGINGDIRECTORY/AUv2/${{ parameters.name }}
        mv ${{ parameters.path }}/${{ parameters.name }}/build-mac/${{ parameters.name }}.vst3* $BUILD_ARTIFACTSTAGINGDIRECTORY/VST3/${{ parameters.name }} # must move VST3 first
        mv ${{ parameters.path }}/${{ parameters.name }}/build-mac/${{ parameters.name }}.vst* $BUILD_ARTIFACTSTAGINGDIRECTORY/VST2/${{ parameters.name }}
        mv ${{ parameters.path }}/${{ parameters.name }}/build-mac/${{ parameters.name }}.aaxplugin* $BUILD_ARTIFACTSTAGINGDIRECTORY/AAX/${{ parameters.name }}
        mv ${{ parameters.path }}/${{ parameters.name }}/build-mac/${{ parameters.name }}.component* $BUILD_ARTIFACTSTAGINGDIRECTORY/AUv2/${{ parameters.name }}
      fi
    displayName: Organize artifacts

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'MAC_VST2_${{ parameters.artifactName }}'
      targetPath: '$(Build.ArtifactStagingDirectory)/VST2/${{ parameters.name }}'
    displayName: Publish ${{ parameters.name }} VST2
    condition: eq(${{parameters.justApp}}, false)

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'MAC_VST3_${{ parameters.artifactName }}'
      targetPath: '$(Build.ArtifactStagingDirectory)/VST3/${{ parameters.name }}'
    displayName: Publish ${{ parameters.name }} VST3
    condition: eq(${{parameters.justApp}}, false)

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'MAC_AAX_${{ parameters.artifactName }}'
      targetPath: '$(Build.ArtifactStagingDirectory)/AAX/${{ parameters.name }}'
    displayName: Publish ${{ parameters.name }} AAX
    condition: eq(${{parameters.justApp}}, false)

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'MAC_AUv2_${{ parameters.artifactName }}'
      targetPath: '$(Build.ArtifactStagingDirectory)/AUv2/${{ parameters.name }}'
    displayName: Publish ${{ parameters.name }} AUv2
    condition: eq(${{parameters.justApp}}, false)

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'MAC_APP_${{ parameters.artifactName }}'
      targetPath: '$(Build.ArtifactStagingDirectory)/APP/${{ parameters.name }}'
    displayName: Publish ${{ parameters.name }} APP